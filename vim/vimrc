" ### Turn on the display of 256 colors of the palette ###
set t_Co=256

" ### Disable match against `VI` ###
set nocompatible

" ### Disable line wrapping ###
set nowrap

" ### Set `tab` = 4 spaces ###
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab

" ### set to display different line numbers ###
" in normal mode - line numbers are displayed as relative
" when switching to input mode - become absolute
set number

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
    autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

" ### Turn on syntax highlighting ###
syntax enable

" ### We connect the built-in plugin for working with files ###
filetype plugin on
" set up autocomplete on `tab` to search for files
set path=**
" Adding a search hint
set wildmenu
" Customizable built-in option for working with view files
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_liststyle = 3
let g:netrw_winsize = 25
let g:NetrwIsOpen = 0

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction

" #
" # Key bindings
" #

" ### Set space as leader ###
let mapleader=" "
nnoremap <SPACE> <Nop>

" ### Normal ###
" open NetRW as side explorer
noremap <leader>e :call ToggleNetrw()<CR>

" # Navigate buffers
nnoremap <Leader>bl :buffers<CR>:buffer<Space>
nnoremap <S-l> :bnext<CR>
nnoremap <S-h> :bprev<CR>

" # Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" # Resize with arrows
nnoremap <A-k> :resize +2<CR>
nnoremap <A-j> :resize -2<CR>
nnoremap <A-h> :vertical resize -2<CR>
nnoremap <A-l> :vertical resize +2<CR>

" ### Visual ###
" # Stay in indent mode
vnoremap <A-h> <gv
vnoremap <A-l> >gv

" # Move text up and down
vnoremap <A-j> :m .+1<CR>==
vnoremap <A-k> :m .-2<CR>==
vnoremap p "_dP

" ### Visual Block ###
" # Move text up and down
xnoremap <A-j> :move '>+1<CR>gv-gv
xnoremap <A-k> :move '<-2<CR>gv-gv



" ### set to automatically remove extra spaces at the end of a line ###
autocmd FileType * autocmd BufWritePre <buffer> %s/\s\+$//e

" ### Set the indentation of lines from before and after the cursor ###
" so it won't scroll until the end of the screen itself
set scrolloff=6

" ### Set view view ###
set signcolumn=yes
set colorcolumn=100

" ### higlite cursor only in current windows ###
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" ### Adding settings for working with tags ###
command! MakeTags !echo ctags - not exist
if executable("ctags")
    command! MakeTags !ctags -R .
endif

if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif

" ### Move the UNDO file to a separate directory ###
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile

" ### Move the SWAP file to a separate directory ###
if !isdirectory($HOME."/.vim/swap-dir")
    call mkdir($HOME."/.vim/swap-dir", "", 0700)
endif
set directory^=$HOME/.vim/swap-dir//
set swapfile

" ### Hide search highlighting after timeout ###
set hlsearch
set incsearch

augroup NoHLSearch
    au!
    autocmd CursorHold,CursorMoved * call <SID>NoHLAfter(4)
augroup END

function! s:NoHLAfter(n)
    if !exists('g:nohl_starttime')
        let g:nohl_starttime = localtime()
    else
        if v:hlsearch && (localtime() - g:nohl_starttime) >= a:n
            :nohlsearch
            redraw
            unlet g:nohl_starttime
        endif
    endif
endfunction

" ### Add smart search ###
set ignorecase
set smartcase

" ### Set color scheme ###
colorschem evening

" #
" # ====================================================================================================
" # Plugin 'vim-buftabline'
" # source: https://github.com/ap/vim-buftabline
" #

if v:version < 700
    echoerr printf('Vim 7 is required for buftabline (this is only %d.%d)',v:version/100,v:version%100)
    finish
endif

scriptencoding utf-8

hi default link BufTabLineCurrent         TabLineSel
hi default link BufTabLineActive          PmenuSel
hi default link BufTabLineHidden          TabLine
hi default link BufTabLineFill            TabLineFill
hi default link BufTabLineModifiedCurrent BufTabLineCurrent
hi default link BufTabLineModifiedActive  BufTabLineActive
hi default link BufTabLineModifiedHidden  BufTabLineHidden

let g:buftabline_numbers    = get(g:, 'buftabline_numbers',    0)
let g:buftabline_indicators = get(g:, 'buftabline_indicators', 0)
let g:buftabline_separators = get(g:, 'buftabline_separators', 0)
let g:buftabline_show       = get(g:, 'buftabline_show',       2)
let g:buftabline_plug_max   = get(g:, 'buftabline_plug_max',  10)

function! Buftabline_user_buffers() " help buffers are always unlisted, but quickfix buffers are not
    return filter(range(1,bufnr('$')),'buflisted(v:val) && "quickfix" !=? getbufvar(v:val, "&buftype")')
endfunction

function! s:switch_buffer(bufnum, clicks, button, mod)
    execute 'buffer' a:bufnum
endfunction

function s:SID()
    return matchstr(expand('<sfile>'), '<SNR>\d\+_')
endfunction

let s:dirsep = fnamemodify(getcwd(),':p')[-1:]
let s:centerbuf = winbufnr(0)
let s:tablineat = has('tablineat')
let s:sid = s:SID() | delfunction s:SID
function! Buftabline_render()
    let show_num = g:buftabline_numbers == 1
    let show_ord = g:buftabline_numbers == 2
    let show_mod = g:buftabline_indicators
    let lpad     = g:buftabline_separators ? nr2char(0x23B8) : ' '

    let bufnums = Buftabline_user_buffers()
    let centerbuf = s:centerbuf " prevent tabline jumping around when non-user buffer current (e.g. help)

    " fetch data across all buffers
    let tabs = []
    let path_tabs = []
    let tabs_per_tail = {}
    let currentbuf = winbufnr(0)
    let screen_num = 0
    for bufnum in bufnums
        let screen_num = show_num ? bufnum : show_ord ? screen_num + 1 : ''
        let tab = { 'num': bufnum, 'pre': '' }
        let tab.hilite = currentbuf == bufnum ? 'Current' : bufwinnr(bufnum) > 0 ? 'Active' : 'Hidden'
        if currentbuf == bufnum | let [centerbuf, s:centerbuf] = [bufnum, bufnum] | endif
        let bufpath = bufname(bufnum)
        if strlen(bufpath)
            let tab.path = fnamemodify(bufpath, ':p:~:.')
            let tab.sep = strridx(tab.path, s:dirsep, strlen(tab.path) - 2) " keep trailing dirsep
            let tab.label = tab.path[tab.sep + 1:]
            let pre = screen_num
            if getbufvar(bufnum, '&mod')
                let tab.hilite = 'Modified' . tab.hilite
                if show_mod | let pre = '+' . pre | endif
            endif
            if strlen(pre) | let tab.pre = pre . ' ' | endif
            let tabs_per_tail[tab.label] = get(tabs_per_tail, tab.label, 0) + 1
            let path_tabs += [tab]
        elseif -1 < index(['nofile','acwrite'], getbufvar(bufnum, '&buftype')) " scratch buffer
            let tab.label = ( show_mod ? '!' . screen_num : screen_num ? screen_num . ' !' : '!' )
        else " unnamed file
            let tab.label = ( show_mod && getbufvar(bufnum, '&mod') ? '+' : '' ) . ( screen_num ? screen_num : '*' )
        endif
        let tabs += [tab]
    endfor

    " disambiguate files with the same base names by adding trailing path segments
    while len(filter(tabs_per_tail, 'v:val > 1'))
        let [ambiguous, tabs_per_tail] = [tabs_per_tail, {}]
        for tab in path_tabs
            if -1 < tab.sep && has_key(ambiguous, tab.label)
                let tab.sep = strridx(tab.path, s:dirsep, tab.sep - 1)
                let tab.label = tab.path[tab.sep + 1:]
            endif
            let tabs_per_tail[tab.label] = get(tabs_per_tail, tab.label, 0) + 1
        endfor
    endwhile

    " now keep the current buffer as center of the screen as possible:

    " 1. setup
    let lft = { 'lasttab':  0, 'cut':  '.', 'indicator': '<', 'width': 0, 'half': &columns / 2 }
    let rgt = { 'lasttab': -1, 'cut': '.$', 'indicator': '>', 'width': 0, 'half': &columns - lft.half }

    " 2. sum the string lengths for the left and right halves
    let currentside = lft
    let lpad_width = strwidth(lpad)
    for tab in tabs
        let tab.width = lpad_width + strwidth(tab.pre) + strwidth(tab.label) + 1
        let tab.label = lpad . tab.pre . substitute(strtrans(tab.label), '%', '%%', 'g') . ' '
        if centerbuf == tab.num
            let halfwidth = tab.width / 2
            let lft.width += halfwidth
            let rgt.width += tab.width - halfwidth
            let currentside = rgt
            continue
        endif
        let currentside.width += tab.width
    endfor
    if currentside is lft " centered buffer not seen?
        " then blame any overflow on the right side to protect the left
        let [lft.width, rgt.width] = [0, lft.width]
    endif

    " 3. toss away tabs and pieces until all fits:
    if ( lft.width + rgt.width ) > &columns
        let oversized = lft.width < lft.half ? [ [ rgt, &columns - lft.width ] ] : rgt.width < rgt.half ? [ [ lft, &columns - rgt.width ] ] : [ [ lft, lft.half ], [ rgt, rgt.half ] ]
        for [side, budget] in oversized
            let delta = side.width - budget
            " throw whole tabs to close the distance
            while delta >= tabs[side.lasttab].width
                let delta -= remove(tabs, side.lasttab).width
            endwhile
            " then cut the last one to fit
            let endtab = tabs[side.lasttab]
            while delta > ( endtab.width - strwidth(strtrans(endtab.label)) )
                let endtab.label = substitute(endtab.label, side.cut, '', '')
            endwhile
            let endtab.label = substitute(endtab.label, side.cut, side.indicator, '')
        endfor
    endif

    if len(tabs) | let tabs[0].label = substitute(tabs[0].label, lpad, ' ', '') | endif

    let swallowclicks = '%'.(1 + tabpagenr('$')).'X'
    return s:tablineat ? join(map(tabs,'"%#BufTabLine".v:val.hilite."#" . "%".v:val.num."@'.s:sid.'switch_buffer@" . strtrans(v:val.label)'),'') . '%#BufTabLineFill#' . swallowclicks : swallowclicks . join(map(tabs,'"%#BufTabLine".v:val.hilite."#" . strtrans(v:val.label)'),'') . '%#BufTabLineFill#'
endfunction

function! Buftabline_update(zombie)
    set tabline=
    if tabpagenr('$') > 1 | set guioptions+=e showtabline=2 | return | endif
    set guioptions-=e
    if 0 == g:buftabline_show
        set showtabline=1
        return
    elseif 1 == g:buftabline_show
        " account to trigger BufDelete before actually deleting the buffer
        let bufnums = filter(Buftabline_user_buffers(), 'v:val != a:zombie')
        let &g:showtabline = 1 + ( len(bufnums) > 1 )
    elseif 2 == g:buftabline_show
        set showtabline=2
    endif
    set tabline=%!Buftabline_render()
endfunction

augroup BufTabLine
autocmd!
autocmd VimEnter  * call Buftabline_update(0)
autocmd TabEnter  * call Buftabline_update(0)
autocmd BufAdd    * call Buftabline_update(0)
autocmd FileType qf call Buftabline_update(0)
autocmd BufDelete * call Buftabline_update(str2nr(expand('<abuf>')))
augroup END

for s:n in range(1, g:buftabline_plug_max) + ( g:buftabline_plug_max > 0 ? [-1] : [] )
    let s:b = s:n == -1 ? -1 : s:n - 1
    execute printf("noremap <silent> <Plug>BufTabLine.Go(%d) :<C-U>exe 'b'.get(Buftabline_user_buffers(),%d,'')<cr>", s:n, s:b)
endfor
unlet! s:n s:b

if v:version < 703
    function s:transpile()
        let [ savelist, &list ] = [ &list, 0 ]
        redir => src
            silent function Buftabline_render
        redir END
        let &list = savelist
        let src = substitute(src, '\n\zs[0-9 ]*', '', 'g')
        let src = substitute(src, 'strwidth(strtrans(\([^)]\+\)))', 'strlen(substitute(\1, ''\p\|\(.\)'', ''x\1'', ''g''))', 'g')
        return src
    endfunction
    exe "delfunction Buftabline_render\n" . s:transpile()
    delfunction s:transpile
endif
" #
" # ====================================================================================================
" #
