#!/usr/bin/bash

bar_color="#89b4fa"
volume_step=1
brightness_step=5
max_volume=100
download_album_art=true
show_album_art=true
show_music_in_volume_indicator=true

# Uses regex to get volume from pactl
function get_volume {
    pactl get-sink-volume @DEFAULT_SINK@ | grep -Po '[0-9]{1,3}(?=%)' | head -1
}

# Uses regex to get mute status from pactl
function get_mute {
    pactl get-sink-mute @DEFAULT_SINK@ | grep -Po '(?<=Mute: )(yes|no)'
}

# Uses regex to get brightness from xbacklight
function get_brightness {
    xbacklight | grep -Po '[0-9]{1,3}' | head -n 1
}

# Returns a mute icon, a volume-low icon, or a volume-high icon, depending on the volume
function get_volume_icon {
    volume=$(get_volume)
    mute=$(get_mute)
    if [ "$volume" -eq 0 ] || [ "$mute" == "yes" ]; then
        volume_icon=""
    elif [ "$volume" -lt 50 ]; then
        volume_icon=""
    else
        volume_icon=""
    fi
}

# Always returns the same icon - I couldn't get the brightness-low icon to work with fontawesome
function get_brightness_icon {
    brightness_icon=""
}

function get_album_art {
    url=$(playerctl -f "{{mpris:artUrl}}" metadata)
    if [[ $url == "file://"* ]]; then
        album_art="${url/file:\/\//}"
    elif [[ $url == http*://* ]] && [[ $download_album_art == "true" ]]; then
        domain=$(echo "$url" | awk -F/ '{print $3}')

        filename="$(basename "$url")"
        if [[ "$domain" == "avatars.yandex.net" ]]; then
            # Заменить последний / на _
            mod_url="${url%/*}_$(basename "$url")"
            filename="$(basename "$mod_url")"
        fi

        if [ ! -f "/tmp/$filename" ]; then
            wget -O "/tmp/$filename" "$url"
        fi

        album_art="/tmp/$filename"
    else
        album_art=""
    fi
}

# Displays a volume notification
function show_volume_notif {
    volume=$(get_mute)
    get_volume_icon

    if [[ $show_music_in_volume_indicator == "true" ]]; then
        current_song=$(playerctl -f "{{title}} - {{artist}}" metadata)

        if [[ $show_album_art == "true" ]]; then
            get_album_art
        fi

        appname="volume control"
        if [ -n $album_art ]; then
            appname="music"
        fi

        dunstify \
            --appname $appname \
            --hints string:x-dunst-stack-tag:volume_notif \
            --hints int:value:$volume \
            --hints string:hlcolor:$bar_color \
            --icon "$album_art" \
            --urgency low \
            "$volume_icon $volume%" "$current_song"
    else
        dunstify \
            --appname "volume control" \
            --hints string:x-dunst-stack-tag:volume_notif \
            --hints int:value:$volume \
            --hints string:hlcolor:$bar_color \
            --urgency low \
            "$volume_icon $volume%"
    fi
}

# Displays a music notification
# $1 - icon of the action (optional)
function show_music_notif {
    action_icon="$1"
    if [ -z $action_icon ]; then
        status=$(playerctl status)
        if [[ "$status" == "Playing" ]]; then
            action_icon="▶"
        else
            action_icon="⏸"
        fi
    fi
    song_title=$(playerctl -f "{{title}}" metadata)
    song_artist=$(playerctl -f "{{artist}}" metadata)
    song_album=$(playerctl -f "{{album}}" metadata)
    notify_progress

    if [[ $show_album_art == "true" ]]; then
        get_album_art
    fi

    dunstify \
        --appname "music" \
        --hints string:x-dunst-stack-tag:music_notif \
        --hints int:value:$percent \
        --hints string:hlcolor:$bar_color \
        --icon "$album_art" \
        --urgency low \
        "$action_icon $song_title" "$song_artist - $song_album"
}

# Displays a brightness notification using dunstify
function show_brightness_notif {
    brightness=$(get_brightness)
    echo $brightness
    get_brightness_icon
    dunstify \
        --appname "brightness control" \
        --hints string:x-dunst-stack-tag:brightness_notif \
        --hints int:value:$brightness \
        --hints string:hlcolor:$bar_color \
        --urgency low \
        "$brightness_icon $brightness%"
}

function notify_progress() {
    # Получение позиции и длины
    pos=$(playerctl -p "$player" position 2>/dev/null)
    len=$(playerctl -p "$player" metadata mpris:length 2>/dev/null)

    # Проверка на нули
    if [ -z "$pos" ] || [ -z "$len" ] || [ "$len" -eq 0 ]; then
        return 1
    fi

    # Вычисление прогресса
    percent=$(awk -v p="$pos" -v l="$len" 'BEGIN { printf("%.1f", 100 * p / (l / 1000000)) }')
}

# Main function - Takes user input, "volume_up", "volume_down", "brightness_up", or "brightness_down"
case $1 in
volume_up)
    # Unmutes and increases volume, then displays the notification
    pactl set-sink-mute @DEFAULT_SINK@ 0
    volume=$(get_volume)
    if [ $(("$volume" + "$volume_step")) -gt $max_volume ]; then
        pactl set-sink-volume @DEFAULT_SINK@ $max_volume%
    else
        pactl set-sink-volume @DEFAULT_SINK@ +$volume_step%
    fi
    show_volume_notif
    ;;

volume_down)
    # Raises volume and displays the notification
    pactl set-sink-volume @DEFAULT_SINK@ -$volume_step%
    show_volume_notif
    ;;

volume_mute)
    # Toggles mute and displays the notification
    pactl set-sink-mute @DEFAULT_SINK@ toggle
    show_volume_notif
    ;;

brightness_up)
    # Increases brightness and displays the notification
    xbacklight -inc $brightness_step -time 0
    show_brightness_notif
    ;;

brightness_down)
    # Decreases brightness and displays the notification
    xbacklight -dec $brightness_step -time 0
    show_brightness_notif
    ;;

next_track)
    # Skips to the next song and displays the notification
    playerctl next
    sleep 0.5 && show_music_notif "⏭"
    ;;

prev_track)
    # Skips to the previous song and displays the notification
    playerctl previous
    sleep 0.5 && show_music_notif "⏮"
    ;;

play_pause)
    # Pauses/resumes playback and displays the notification
    playerctl play-pause
    sleep 0.5
    show_music_notif
    ;;
esac

if [ -z $1 ]; then
    show_music_notif
fi
